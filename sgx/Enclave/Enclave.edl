/* Enclave.edl - Top EDL file. */

enclave {

    trusted {
    											  
		public void ecall_layernorm	([user_check]float* x, [user_check]float* gamma, [user_check]float* beta, float eps, int B, int M, int N);
    public void ecall_ReLU	([user_check]float* x,int B, int M, int N);				
    public void ecall_Softmax	([user_check]float* x,int B, int M, int N);			

    public void ecall_Set_Hidden_States([user_check]float* hidden_states, int B, int M, int N, int* ret_id);
    
    public void ecall_Copy_Hidden_States(int src_id, int* ret_id);

    public void ecall_Set_Layer_Norm_Param([user_check]float* gamma, float* beta, int N, float eps, int* ret_id);

    public void ecall_Layer_Norm_Q(int src_id, int layer_norm_param_id, int* ret_id);

    public void ecall_Set_Linear_Param_WS8BS8(char* weight, char* bias, int M, int N,
                                  float alpha, float beta, int* ret_id);
    public void ecall_Set_Linear_Param_WS8BFP32(char* weight, float* bias, int M, int N,
                                    float alpha, int* ret_id);

    /*void*/ public void ecall_Get_Tensor_Dim_Int32(int src_id, int* dim);
    /*void*/ public void ecall_Get_Tensor_Int32(int src_id, int* out);
    public void ecall_Get_Encrypted_Tensor_Opr1_Int32(int src_id, int* out, int* ret_id);
    public void ecall_Set_Tensor_Int32(int* data, int B, int M, int N, int* ret_id);
    public void ecall_Set_Decrypted_Tensor_Opr1_Int32(int* data, int B, int M, int N,
                                          int blind_factor_id,
                                          int linear_param_id, int* ret_id);

    // This will return unblind factor id to unblind factor
    public void ecall_Get_Encrypted_Tensor_Opr2_Int32(int src_id1, int src_id2, int* out1,
                                          int* out2, int* ret_id);
    public void ecall_Set_Decrypted_Tensor_Opr2_Int32(int* data, int B, int M, int N,
                                          int unblind_factor_id, int* ret_id);

    /*void*/ public void ecall_Get_Tensor_Dim_Int8(int src_id, int* dim);
    /*void*/ public void ecall_Get_Tensor_Int8(int src_id, char* out);
    public void ecall_Set_Tensor_Int8(char* data, int B, int M, int N, int* ret_id);

    /*void*/ public void ecall_Get_Tensor_Dim_Float(int src_id, int* dim);
    /*void*/ public void ecall_Get_Tensor_Float(int src_id, float* out);
    public void ecall_Set_Tensor_Float(float* data, int B, int M, int N, int* ret_id);

    public void ecall_Compute_Epilogue_WS8BS8(int src_id, int linear_param_id, int* ret_id);
    public void ecall_Compute_Epilogue_WS8BFP32(int src_id, int linear_param_id, int* ret_id);
    public void ecall_Compute_Epilogue_BMM(int src_id, int bmm_param_id, int* ret_id);

    public void ecall_ReLU(int src_id, int* ret_id);
    public void ecall_Softmax(int src_id, int* ret_id);
    public void ecall_Quantize_Post_Softmax(int src_id, int* ret_id);

    public void ecall_Cast_From_Float_To_Int8(int src_id, int* ret_id);
    public void ecall_Cast_From_Float_To_Int32(int src_id, int* ret_id);
    public void ecall_Cast_From_Int8_To_Int32(int src_id, int* ret_id);

    public void ecall_Set_Bmm_Param(float alpha, int* ret_id);

    public void ecall_Residual_Add(int residual, int hidden_states, int* ret_id);

        
    };

    /*
     * ocall_print_string - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */
    untrusted {
        void ocall_print_string([in, string] const char *str);
        void ocall_start_clock();
        double ocall_get_time();
        void ocall_end_clock([in, string] const char *str);
    };
};
